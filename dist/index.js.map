{"version":3,"file":"index.js","sources":["../src/compressImage.js","../src/util.js","../src/cropImage.js"],"sourcesContent":["// imageCompression.js\r\n// Utility for compressing an image file in the browser *without* changing its pixel dimensions.\r\n\r\n/**\r\n * Compress an image so its file size is below `maxMB` MiB while keeping the original width & height.\r\n * \r\n * The algorithm progressively lowers JPEG quality (or uses WebP fallback for PNG/GIF) until the\r\n * desired size is reached, or it hits a minimum quality threshold.\r\n * \r\n * @param {File}  file        – The source image File/Blob selected by the user.\r\n * @param {number} maxMB      – Maximum size in mebibytes (MiB) for the compressed file.\r\n * @param {Object} [opts]     – Optional settings.\r\n * @param {number} [opts.minQuality=0.3] – Lowest allowed quality before giving up.\r\n * @param {number} [opts.step=0.05]      – Step by which to decrease quality each iteration.\r\n * @returns {Promise<File>}             – A new File under the size limit, or the original file if\r\n *                                        already below the limit (or if we can’t compress enough).\r\n */\r\nexport async function compressImage(file, maxMB, opts = {}) {\r\n    const { minQuality = 0.3, step = 0.05 } = opts;\r\n\r\n    if (!(file instanceof File)) {\r\n        throw new TypeError(\"compressImage expects a File instance\");\r\n    }\r\n    \r\n    if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\r\n\r\n    if (file.size / 1048576 <= maxMB) return file; // already small enough\r\n\r\n    const dataUrl = await _fileToDataURL(file);\r\n    const img = await _dataURLToImage(dataUrl);\r\n\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0);\r\n\r\n    let quality = 0.95; // start near‑visually‑lossless\r\n    let blob = await _canvasToBlob(canvas, file.type, quality);\r\n\r\n    // If the original was PNG/GIF, switch to WebP/JPEG for better compression\r\n    const lossyType = (/png|gif/i.test(file.type)) ? \"image/webp\" : \"image/jpeg\";\r\n\r\n    while (blob.size / 1048576 > maxMB && quality > minQuality) {\r\n        quality = Math.max(quality - step, minQuality);\r\n        blob = await _canvasToBlob(canvas, lossyType, quality);\r\n    }\r\n\r\n    // If we still couldn’t hit the target, return the smaller of the two (blob vs original)\r\n    const finalBlob = blob.size < file.size ? blob : file;\r\n    return new File([finalBlob], _renameWithExtension(file.name, finalBlob.type), {\r\n        type: finalBlob.type,\r\n        lastModified: Date.now()\r\n    });\r\n}\r\n\r\n// ---------- Helpers ----------\r\nfunction _fileToDataURL(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = (e) => reject(e);\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\nfunction _dataURLToImage(dataURL) {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n    img.src = dataURL;\r\n  });\r\n}\r\n\r\nfunction _canvasToBlob(canvas, type, quality) {\r\n  return new Promise((resolve) => canvas.toBlob(resolve, type, quality));\r\n}\r\n\r\nfunction _renameWithExtension(originalName, mimeType) {\r\n  const ext = mimeType.split(\"/\")[1].replace(\"jpeg\", \"jpg\");\r\n  return originalName.replace(/\\.[^.]+$/, \".\" + ext);\r\n}\r\n","/**\n * Utility to get image dimensions from a File or Blob.\n * @param {File|Blob} file \n * @returns {Promise<{width: number, height: number}>}\n */\nexport function getImageDimensions(file) {  \n  if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      resolve({ width: img.naturalWidth, height: img.naturalHeight });\n    };\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n\n/**\n * Utility to check image has min width.\n * @param {File|Blob} file \n * @param {number} minW - min width to be checked\n * @param {number} minH - min height to be checked\n * @returns {Promise<boolean>} true if has minimum dimensions\n */\nexport async function hasMinDimension(file, minW, minH) {\n  if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\n  const {width, height} = await getImageDimensions(file)\n  \n  if(width < minW || height < minH) return false\n  return true\n}\n","import { compressImage } from \"./compressImage\";\nimport { getImageDimensions } from \"./util\";\n\n// Helper to wrap canvas.toBlob in a Promise\nfunction canvasToBlob(canvas, type, quality) {\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      if (blob) resolve(blob);\n      else reject('Canvas toBlob failed');\n    }, type, quality);\n  });\n}\n\n/**\n * Automatically crops the given File to target dimensions and returns a File.\n * Preserves the original filename.\n * Keeps image type (PNG, JPEG, etc.) for output.\n * @param {File} file - File object from the file input\n * @param {number} targetW - Target crop width\n * @param {number} targetH - Target crop heighth\n * @param {number} maxMB - Maxximum mb limit to reduce the size (default: undefined)\n * @returns {Promise<File>} Cropped File object\n */\n\nexport async function cropImage({file, targetW, targetH, maxMB}) {\n  \n  if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\n  if(!targetH && !targetW) return file\n\n  const {width, height} = await getImageDimensions(file)\n  \n  if(width <= targetW || height <= targetH){\n    if((file.size / 1024 / 1024) < maxMB) return file\n    return await compressImage(file, maxMB);\n  } \n  \n  const img = await new Promise((resolve, reject) => {\n    const i = new Image();\n    const objectUrl = URL.createObjectURL(file);\n\n    i.onload = () => {\n      URL.revokeObjectURL(objectUrl);\n      resolve(i);\n    };\n    i.onerror = () => {\n      URL.revokeObjectURL(objectUrl);\n      reject('Image load error');\n    };\n\n    i.src = objectUrl;\n  });\n\n  const origW = img.naturalWidth;\n  const origH = img.naturalHeight;\n\n  const scaleX = targetW ? targetW/origW : 0\n  const scaleY = targetH ? targetH/origH : 0\n\n  const scale = Math.max(scaleX, scaleY);\n  const newW = Math.ceil(origW * scale);\n  const newH = Math.ceil(origH * scale);\n\n  if(!targetW || targetW === 0){\n    targetW = scale*origW\n  }\n  if(!targetH || targetH === 0){\n    targetH = scale*origH    \n  }\n\n  const tempCanvas = document.createElement('canvas');\n  tempCanvas.width = newW;\n  tempCanvas.height = newH;\n  tempCanvas.getContext('2d').drawImage(img, 0, 0, newW, newH);\n\n  const cropX = Math.floor((newW - targetW) / 2);\n  const cropY = Math.floor((newH - targetH) / 2);\n\n  const outCanvas = document.createElement('canvas');\n  outCanvas.width = targetW;\n  outCanvas.height = targetH;\n  outCanvas.getContext('2d').drawImage(tempCanvas, cropX, cropY, targetW, targetH, 0, 0, targetW, targetH);\n\n  let mimeType = file.type;\n  if (!mimeType || mimeType === 'image/svg+xml') mimeType = 'image/png';\n\n  const quality = mimeType === 'image/jpeg' ? 0.9 : undefined;\n  const blob = await canvasToBlob(outCanvas, mimeType, quality);\n\n  const originalName = file.name.replace(/\\.[^/.]+$/, '');\n  const extension = mimeType.split('/')[1] || 'png';\n  const ext = extension === 'jpeg' ? 'jpg' : extension;\n\n  const croppedFile = new File([blob], `${originalName}.${ext}`, { type: mimeType });\n\n  if (maxMB) {\n    return await compressImage(croppedFile, maxMB);\n  }\n\n  return croppedFile;\n}"],"names":["compressImage","file","maxMB","opts","minQuality","step","File","TypeError","type","startsWith","Error","size","dataUrl","_fileToDataURL","img","_dataURLToImage","canvas","document","createElement","width","height","ctx","getContext","drawImage","quality","blob","_canvasToBlob","lossyType","test","Math","max","finalBlob","_renameWithExtension","name","lastModified","Date","now","Promise","resolve","reject","reader","FileReader","onload","result","onerror","e","readAsDataURL","dataURL","Image","src","toBlob","originalName","mimeType","ext","split","replace","getImageDimensions","naturalWidth","naturalHeight","URL","createObjectURL","hasMinDimension","minW","minH","canvasToBlob","cropImage","targetW","targetH","i","objectUrl","revokeObjectURL","origW","origH","scaleX","scaleY","scale","newW","ceil","newH","tempCanvas","cropX","floor","cropY","outCanvas","undefined","extension","croppedFile"],"mappings":"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"}