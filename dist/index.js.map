{"version":3,"file":"index.js","sources":["../src/util.js","../src/cropImage.js"],"sourcesContent":["import imageCompression from 'browser-image-compression';\n\n/**\n * Compress an image File to a target max size in MB.\n * Logs original and compressed size + dimensions.\n * \n * @param {File} file - The original image File\n * @param {number} maxSizeMB - Target max size in megabytes\n * @returns {Promise<File>} - Compressed File\n */\nexport async function compressImage(file, maxSizeMB) {\n  if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\n\n  // Load original dimensions\n  const originalSizeMB = (file.size / 1024 / 1024).toFixed(2);\n  const origDims = await getImageDimensions(file);\n  console.log(` Original dimensions: ${origDims.width} × ${origDims.height}, ${originalSizeMB} MB`);\n\n  // Skip if already under threshold\n  if (file.size / 1024 / 1024 <= maxSizeMB) {\n    return file;\n  }\n\n  const options = {\n    maxSizeMB,\n    useWebWorker: true,\n  };\n\n  try {\n    const compressed = await imageCompression(file, options);\n    \n    const compressedSizeMB = (compressed.size / 1024 / 1024).toFixed(2);\n    const compressedDims = await getImageDimensions(compressed);\n    console.log(`Compressed dimensions: ${compressedDims.width} × ${compressedDims.height}, ${compressedSizeMB} MB`);\n\n    return compressed;\n  } catch (err) {\n    throw err;\n  }\n}\n\n/**\n * Utility to get image dimensions from a File or Blob.\n * @param {File|Blob} file \n * @returns {Promise<{width: number, height: number}>}\n */\nexport function getImageDimensions(file) {  \n  if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => {\n      resolve({ width: img.naturalWidth, height: img.naturalHeight });\n    };\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  });\n}\n\n/**\n * Utility to check image has min width.\n * @param {File|Blob} file \n * @param {number} minW - min width to be checked\n * @param {number} minH - min height to be checked\n * @returns {Promise<boolean>} true if has minimum dimensions\n */\nexport async function hasMinDimension(file, minW, minH) {\n  if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\n  const {width, height} = await getImageDimensions(file)\n  \n  if(width < minW || height < minH) return false\n  return true\n}\n","import { compressImage, getImageDimensions } from \"./util\";\n\n// Helper to wrap canvas.toBlob in a Promise\nfunction canvasToBlob(canvas, type, quality) {\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      if (blob) resolve(blob);\n      else reject('Canvas toBlob failed');\n    }, type, quality);\n  });\n}\n\n/**\n * Automatically crops the given File to target dimensions and returns a File.\n * Preserves the original filename.\n * Keeps image type (PNG, JPEG, etc.) for output.\n * @param {File} file - File object from the file input\n * @param {number} targetW - Target crop width\n * @param {number} targetH - Target crop heighth\n * @param {number} maxMbLimit - Maxximum mb limit to reduce the size (default: undefined)\n * @returns {Promise<File>} Cropped File object\n */\n\nexport async function cropImage({file, targetW, targetH, maxMbLimit}) {\n  \n  if (!file.type.startsWith('image/')) throw new Error('Only image files are supported');\n\n  const {width, height} = await getImageDimensions(file)\n  \n  if(width <= targetW || height <= targetH){\n    if((file.size / 1024 / 1024) < maxMbLimit) return file\n    return await compressImage(file, maxMbLimit);\n  } \n  \n  const img = await new Promise((resolve, reject) => {\n    const i = new Image();\n    const objectUrl = URL.createObjectURL(file);\n\n    i.onload = () => {\n      URL.revokeObjectURL(objectUrl);\n      resolve(i);\n    };\n    i.onerror = () => {\n      URL.revokeObjectURL(objectUrl);\n      reject('Image load error');\n    };\n\n    i.src = objectUrl;\n  });\n\n  const origW = img.naturalWidth;\n  const origH = img.naturalHeight;\n\n  const scale = Math.max(targetW / origW, targetH / origH);\n  const newW = Math.ceil(origW * scale);\n  const newH = Math.ceil(origH * scale);\n\n  const tempCanvas = document.createElement('canvas');\n  tempCanvas.width = newW;\n  tempCanvas.height = newH;\n  tempCanvas.getContext('2d').drawImage(img, 0, 0, newW, newH);\n\n  const cropX = Math.floor((newW - targetW) / 2);\n  const cropY = Math.floor((newH - targetH) / 2);\n\n  const outCanvas = document.createElement('canvas');\n  outCanvas.width = targetW;\n  outCanvas.height = targetH;\n  outCanvas.getContext('2d').drawImage(tempCanvas, cropX, cropY, targetW, targetH, 0, 0, targetW, targetH);\n\n  let mimeType = file.type;\n  if (!mimeType || mimeType === 'image/svg+xml') mimeType = 'image/png';\n\n  const quality = mimeType === 'image/jpeg' ? 0.9 : undefined;\n  const blob = await canvasToBlob(outCanvas, mimeType, quality);\n\n  const originalName = file.name.replace(/\\.[^/.]+$/, '');\n  const extension = mimeType.split('/')[1] || 'png';\n  const ext = extension === 'jpeg' ? 'jpg' : extension;\n\n  const croppedFile = new File([blob], `${originalName}.${ext}`, { type: mimeType });\n\n  if (maxMbLimit) {\n    return await compressImage(croppedFile, maxMbLimit);\n  }\n\n  return croppedFile;\n}"],"names":["compressImage","file","maxSizeMB","type","startsWith","Error","originalSizeMB","size","toFixed","origDims","getImageDimensions","console","log","width","height","options","useWebWorker","compressed","imageCompression","compressedSizeMB","compressedDims","err","Promise","resolve","reject","img","Image","onload","naturalWidth","naturalHeight","onerror","src","URL","createObjectURL","hasMinDimension","minW","minH","canvasToBlob","canvas","quality","toBlob","blob","cropImage","targetW","targetH","maxMbLimit","i","objectUrl","revokeObjectURL","origW","origH","scale","Math","max","newW","ceil","newH","tempCanvas","document","createElement","getContext","drawImage","cropX","floor","cropY","outCanvas","mimeType","undefined","originalName","name","replace","extension","split","ext","croppedFile","File"],"mappings":"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"}